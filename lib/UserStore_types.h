/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef UserStore_TYPES_H
#define UserStore_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "Types_types.h"
#include "Errors_types.h"


namespace evernote { namespace edam {

typedef struct _PublicUserInfo__isset {
  _PublicUserInfo__isset() : privilege(false), username(false), noteStoreUrl(false), webApiUrlPrefix(false) {}
  bool privilege;
  bool username;
  bool noteStoreUrl;
  bool webApiUrlPrefix;
} _PublicUserInfo__isset;

class PublicUserInfo {
 public:

  static const char* ascii_fingerprint; // = "136F76319E3F0B8411FD5BB100F8885A";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0x6F,0x76,0x31,0x9E,0x3F,0x0B,0x84,0x11,0xFD,0x5B,0xB1,0x00,0xF8,0x88,0x5A};

  PublicUserInfo() : userId(0), shardId(""), username(""), noteStoreUrl(""), webApiUrlPrefix("") {
  }

  virtual ~PublicUserInfo() throw() {}

  evernote::edam::UserID userId;
  std::string shardId;
  evernote::edam::PrivilegeLevel::type privilege;
  std::string username;
  std::string noteStoreUrl;
  std::string webApiUrlPrefix;

  _PublicUserInfo__isset __isset;

  bool operator == (const PublicUserInfo & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(shardId == rhs.shardId))
      return false;
    if (__isset.privilege != rhs.__isset.privilege)
      return false;
    else if (__isset.privilege && !(privilege == rhs.privilege))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.noteStoreUrl != rhs.__isset.noteStoreUrl)
      return false;
    else if (__isset.noteStoreUrl && !(noteStoreUrl == rhs.noteStoreUrl))
      return false;
    if (__isset.webApiUrlPrefix != rhs.__isset.webApiUrlPrefix)
      return false;
    else if (__isset.webApiUrlPrefix && !(webApiUrlPrefix == rhs.webApiUrlPrefix))
      return false;
    return true;
  }
  bool operator != (const PublicUserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PublicUserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthenticationResult__isset {
  _AuthenticationResult__isset() : user(false), publicUserInfo(false), noteStoreUrl(false), webApiUrlPrefix(false), secondFactorRequired(false), secondFactorDeliveryHint(false) {}
  bool user;
  bool publicUserInfo;
  bool noteStoreUrl;
  bool webApiUrlPrefix;
  bool secondFactorRequired;
  bool secondFactorDeliveryHint;
} _AuthenticationResult__isset;

class AuthenticationResult {
 public:

  static const char* ascii_fingerprint; // = "AC3ACA1F66892F38A3B6A141A932B007";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0x3A,0xCA,0x1F,0x66,0x89,0x2F,0x38,0xA3,0xB6,0xA1,0x41,0xA9,0x32,0xB0,0x07};

  AuthenticationResult() : currentTime(0), authenticationToken(""), expiration(0), noteStoreUrl(""), webApiUrlPrefix(""), secondFactorRequired(0), secondFactorDeliveryHint("") {
  }

  virtual ~AuthenticationResult() throw() {}

  evernote::edam::Timestamp currentTime;
  std::string authenticationToken;
  evernote::edam::Timestamp expiration;
  evernote::edam::User user;
  PublicUserInfo publicUserInfo;
  std::string noteStoreUrl;
  std::string webApiUrlPrefix;
  bool secondFactorRequired;
  std::string secondFactorDeliveryHint;

  _AuthenticationResult__isset __isset;

  bool operator == (const AuthenticationResult & rhs) const
  {
    if (!(currentTime == rhs.currentTime))
      return false;
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(expiration == rhs.expiration))
      return false;
    if (__isset.user != rhs.__isset.user)
      return false;
    else if (__isset.user && !(user == rhs.user))
      return false;
    if (__isset.publicUserInfo != rhs.__isset.publicUserInfo)
      return false;
    else if (__isset.publicUserInfo && !(publicUserInfo == rhs.publicUserInfo))
      return false;
    if (__isset.noteStoreUrl != rhs.__isset.noteStoreUrl)
      return false;
    else if (__isset.noteStoreUrl && !(noteStoreUrl == rhs.noteStoreUrl))
      return false;
    if (__isset.webApiUrlPrefix != rhs.__isset.webApiUrlPrefix)
      return false;
    else if (__isset.webApiUrlPrefix && !(webApiUrlPrefix == rhs.webApiUrlPrefix))
      return false;
    if (__isset.secondFactorRequired != rhs.__isset.secondFactorRequired)
      return false;
    else if (__isset.secondFactorRequired && !(secondFactorRequired == rhs.secondFactorRequired))
      return false;
    if (__isset.secondFactorDeliveryHint != rhs.__isset.secondFactorDeliveryHint)
      return false;
    else if (__isset.secondFactorDeliveryHint && !(secondFactorDeliveryHint == rhs.secondFactorDeliveryHint))
      return false;
    return true;
  }
  bool operator != (const AuthenticationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthenticationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BootstrapSettings__isset {
  _BootstrapSettings__isset() : enableFacebookSharing(false), enableGiftSubscriptions(false), enableSupportTickets(false), enableSharedNotebooks(false), enableSingleNoteSharing(false), enableSponsoredAccounts(false), enableTwitterSharing(false), enableLinkedInSharing(false), enablePublicNotebooks(false) {}
  bool enableFacebookSharing;
  bool enableGiftSubscriptions;
  bool enableSupportTickets;
  bool enableSharedNotebooks;
  bool enableSingleNoteSharing;
  bool enableSponsoredAccounts;
  bool enableTwitterSharing;
  bool enableLinkedInSharing;
  bool enablePublicNotebooks;
} _BootstrapSettings__isset;

class BootstrapSettings {
 public:

  static const char* ascii_fingerprint; // = "70BFB06B5A018C74836FE173445B1EBF";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xBF,0xB0,0x6B,0x5A,0x01,0x8C,0x74,0x83,0x6F,0xE1,0x73,0x44,0x5B,0x1E,0xBF};

  BootstrapSettings() : serviceHost(""), marketingUrl(""), supportUrl(""), accountEmailDomain(""), enableFacebookSharing(0), enableGiftSubscriptions(0), enableSupportTickets(0), enableSharedNotebooks(0), enableSingleNoteSharing(0), enableSponsoredAccounts(0), enableTwitterSharing(0), enableLinkedInSharing(0), enablePublicNotebooks(0) {
  }

  virtual ~BootstrapSettings() throw() {}

  std::string serviceHost;
  std::string marketingUrl;
  std::string supportUrl;
  std::string accountEmailDomain;
  bool enableFacebookSharing;
  bool enableGiftSubscriptions;
  bool enableSupportTickets;
  bool enableSharedNotebooks;
  bool enableSingleNoteSharing;
  bool enableSponsoredAccounts;
  bool enableTwitterSharing;
  bool enableLinkedInSharing;
  bool enablePublicNotebooks;

  _BootstrapSettings__isset __isset;

  bool operator == (const BootstrapSettings & rhs) const
  {
    if (!(serviceHost == rhs.serviceHost))
      return false;
    if (!(marketingUrl == rhs.marketingUrl))
      return false;
    if (!(supportUrl == rhs.supportUrl))
      return false;
    if (!(accountEmailDomain == rhs.accountEmailDomain))
      return false;
    if (__isset.enableFacebookSharing != rhs.__isset.enableFacebookSharing)
      return false;
    else if (__isset.enableFacebookSharing && !(enableFacebookSharing == rhs.enableFacebookSharing))
      return false;
    if (__isset.enableGiftSubscriptions != rhs.__isset.enableGiftSubscriptions)
      return false;
    else if (__isset.enableGiftSubscriptions && !(enableGiftSubscriptions == rhs.enableGiftSubscriptions))
      return false;
    if (__isset.enableSupportTickets != rhs.__isset.enableSupportTickets)
      return false;
    else if (__isset.enableSupportTickets && !(enableSupportTickets == rhs.enableSupportTickets))
      return false;
    if (__isset.enableSharedNotebooks != rhs.__isset.enableSharedNotebooks)
      return false;
    else if (__isset.enableSharedNotebooks && !(enableSharedNotebooks == rhs.enableSharedNotebooks))
      return false;
    if (__isset.enableSingleNoteSharing != rhs.__isset.enableSingleNoteSharing)
      return false;
    else if (__isset.enableSingleNoteSharing && !(enableSingleNoteSharing == rhs.enableSingleNoteSharing))
      return false;
    if (__isset.enableSponsoredAccounts != rhs.__isset.enableSponsoredAccounts)
      return false;
    else if (__isset.enableSponsoredAccounts && !(enableSponsoredAccounts == rhs.enableSponsoredAccounts))
      return false;
    if (__isset.enableTwitterSharing != rhs.__isset.enableTwitterSharing)
      return false;
    else if (__isset.enableTwitterSharing && !(enableTwitterSharing == rhs.enableTwitterSharing))
      return false;
    if (__isset.enableLinkedInSharing != rhs.__isset.enableLinkedInSharing)
      return false;
    else if (__isset.enableLinkedInSharing && !(enableLinkedInSharing == rhs.enableLinkedInSharing))
      return false;
    if (__isset.enablePublicNotebooks != rhs.__isset.enablePublicNotebooks)
      return false;
    else if (__isset.enablePublicNotebooks && !(enablePublicNotebooks == rhs.enablePublicNotebooks))
      return false;
    return true;
  }
  bool operator != (const BootstrapSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BootstrapProfile {
 public:

  static const char* ascii_fingerprint; // = "09FEABA36C8610270E1D3AD124EFFDF3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xFE,0xAB,0xA3,0x6C,0x86,0x10,0x27,0x0E,0x1D,0x3A,0xD1,0x24,0xEF,0xFD,0xF3};

  BootstrapProfile() : name("") {
  }

  virtual ~BootstrapProfile() throw() {}

  std::string name;
  BootstrapSettings settings;

  bool operator == (const BootstrapProfile & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const BootstrapProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BootstrapInfo {
 public:

  static const char* ascii_fingerprint; // = "ECB0F629D029C81964A245F17D9BBA00";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0xB0,0xF6,0x29,0xD0,0x29,0xC8,0x19,0x64,0xA2,0x45,0xF1,0x7D,0x9B,0xBA,0x00};

  BootstrapInfo() {
  }

  virtual ~BootstrapInfo() throw() {}

  std::vector<BootstrapProfile>  profiles;

  bool operator == (const BootstrapInfo & rhs) const
  {
    if (!(profiles == rhs.profiles))
      return false;
    return true;
  }
  bool operator != (const BootstrapInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BootstrapInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
